// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OtlpExport with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OtlpExport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OtlpExport with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OtlpExportMultiError, or
// nil if none found.
func (m *OtlpExport) ValidateAll() error {
	return m.validate(true)
}

func (m *OtlpExport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OtlpGrpcEndpoint != nil {
		// no validation rules for OtlpGrpcEndpoint
	}

	if m.OtlpMetricsPrefix != nil {
		// no validation rules for OtlpMetricsPrefix
	}

	if len(errors) > 0 {
		return OtlpExportMultiError(errors)
	}

	return nil
}

// OtlpExportMultiError is an error wrapping multiple validation errors
// returned by OtlpExport.ValidateAll() if the designated constraints aren't met.
type OtlpExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OtlpExportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OtlpExportMultiError) AllErrors() []error { return m }

// OtlpExportValidationError is the validation error returned by
// OtlpExport.Validate if the designated constraints aren't met.
type OtlpExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OtlpExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OtlpExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OtlpExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OtlpExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OtlpExportValidationError) ErrorName() string { return "OtlpExportValidationError" }

// Error satisfies the builtin error interface
func (e OtlpExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOtlpExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OtlpExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OtlpExportValidationError{}

// Validate checks the field values on GoExecutor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GoExecutor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoExecutor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GoExecutorMultiError, or
// nil if none found.
func (m *GoExecutor) ValidateAll() error {
	return m.validate(true)
}

func (m *GoExecutor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GoMaxProc != nil {
		// no validation rules for GoMaxProc
	}

	if m.CancelOnError != nil {
		// no validation rules for CancelOnError
	}

	if len(errors) > 0 {
		return GoExecutorMultiError(errors)
	}

	return nil
}

// GoExecutorMultiError is an error wrapping multiple validation errors
// returned by GoExecutor.ValidateAll() if the designated constraints aren't met.
type GoExecutorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoExecutorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoExecutorMultiError) AllErrors() []error { return m }

// GoExecutorValidationError is the validation error returned by
// GoExecutor.Validate if the designated constraints aren't met.
type GoExecutorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoExecutorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoExecutorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoExecutorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoExecutorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoExecutorValidationError) ErrorName() string { return "GoExecutorValidationError" }

// Error satisfies the builtin error interface
func (e GoExecutorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoExecutor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoExecutorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoExecutorValidationError{}

// Validate checks the field values on K6Executor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K6Executor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K6Executor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K6ExecutorMultiError, or
// nil if none found.
func (m *K6Executor) ValidateAll() error {
	return m.validate(true)
}

func (m *K6Executor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, err := url.Parse(m.GetK6BinaryPath()); err != nil {
		err = K6ExecutorValidationError{
			field:  "K6BinaryPath",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_K6Executor_K6BinaryArgs_Unique := make(map[string]struct{}, len(m.GetK6BinaryArgs()))

	for idx, item := range m.GetK6BinaryArgs() {
		_, _ = idx, item

		if _, exists := _K6Executor_K6BinaryArgs_Unique[item]; exists {
			err := K6ExecutorValidationError{
				field:  fmt.Sprintf("K6BinaryArgs[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_K6Executor_K6BinaryArgs_Unique[item] = struct{}{}
		}

		// no validation rules for K6BinaryArgs[idx]
	}

	if _, err := url.Parse(m.GetK6ScriptPath()); err != nil {
		err = K6ExecutorValidationError{
			field:  "K6ScriptPath",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.K6SetupTimeout != nil {

		if all {
			switch v := interface{}(m.GetK6SetupTimeout()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "K6SetupTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "K6SetupTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetK6SetupTimeout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ExecutorValidationError{
					field:  "K6SetupTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.K6Vus != nil {

		if m.GetK6Vus() != 0 {

			if m.GetK6Vus() < 0 {
				err := K6ExecutorValidationError{
					field:  "K6Vus",
					reason: "value must be greater than or equal to 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.K6MaxVus != nil {

		if m.GetK6MaxVus() != 0 {

			if m.GetK6MaxVus() < 0 {
				err := K6ExecutorValidationError{
					field:  "K6MaxVus",
					reason: "value must be greater than or equal to 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.K6Rate != nil {

		if m.GetK6Rate() != 0 {

			if m.GetK6Rate() < 0 {
				err := K6ExecutorValidationError{
					field:  "K6Rate",
					reason: "value must be greater than or equal to 0",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.K6Duration != nil {

		if all {
			switch v := interface{}(m.GetK6Duration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "K6Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "K6Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetK6Duration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ExecutorValidationError{
					field:  "K6Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OtlpExport != nil {

		if all {
			switch v := interface{}(m.GetOtlpExport()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "OtlpExport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ExecutorValidationError{
						field:  "OtlpExport",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOtlpExport()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ExecutorValidationError{
					field:  "OtlpExport",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return K6ExecutorMultiError(errors)
	}

	return nil
}

// K6ExecutorMultiError is an error wrapping multiple validation errors
// returned by K6Executor.ValidateAll() if the designated constraints aren't met.
type K6ExecutorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K6ExecutorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K6ExecutorMultiError) AllErrors() []error { return m }

// K6ExecutorValidationError is the validation error returned by
// K6Executor.Validate if the designated constraints aren't met.
type K6ExecutorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K6ExecutorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K6ExecutorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K6ExecutorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K6ExecutorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K6ExecutorValidationError) ErrorName() string { return "K6ExecutorValidationError" }

// Error satisfies the builtin error interface
func (e K6ExecutorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK6Executor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K6ExecutorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K6ExecutorValidationError{}

// Validate checks the field values on DriverConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DriverConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DriverConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DriverConfigMultiError, or
// nil if none found.
func (m *DriverConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DriverConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, err := url.Parse(m.GetDriverPluginPath()); err != nil {
		err = DriverConfigValidationError{
			field:  "DriverPluginPath",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_DriverConfig_DriverPluginArgs_Unique := make(map[string]struct{}, len(m.GetDriverPluginArgs()))

	for idx, item := range m.GetDriverPluginArgs() {
		_, _ = idx, item

		if _, exists := _DriverConfig_DriverPluginArgs_Unique[item]; exists {
			err := DriverConfigValidationError{
				field:  fmt.Sprintf("DriverPluginArgs[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_DriverConfig_DriverPluginArgs_Unique[item] = struct{}{}
		}

		// no validation rules for DriverPluginArgs[idx]
	}

	if _, err := url.Parse(m.GetUrl()); err != nil {
		err = DriverConfigValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DbSpecific != nil {

		if all {
			switch v := interface{}(m.GetDbSpecific()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DriverConfigValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DriverConfigValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DriverConfigValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DriverConfigMultiError(errors)
	}

	return nil
}

// DriverConfigMultiError is an error wrapping multiple validation errors
// returned by DriverConfig.ValidateAll() if the designated constraints aren't met.
type DriverConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DriverConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DriverConfigMultiError) AllErrors() []error { return m }

// DriverConfigValidationError is the validation error returned by
// DriverConfig.Validate if the designated constraints aren't met.
type DriverConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DriverConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DriverConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DriverConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DriverConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DriverConfigValidationError) ErrorName() string { return "DriverConfigValidationError" }

// Error satisfies the builtin error interface
func (e DriverConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDriverConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DriverConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DriverConfigValidationError{}

// Validate checks the field values on RequestedStep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestedStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestedStep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequestedStepMultiError, or
// nil if none found.
func (m *RequestedStep) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestedStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RequestedStepValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Executor != nil {

		if _, ok := RequestedStep_ExecutorType_name[int32(m.GetExecutor())]; !ok {
			err := RequestedStepValidationError{
				field:  "Executor",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RequestedStepMultiError(errors)
	}

	return nil
}

// RequestedStepMultiError is an error wrapping multiple validation errors
// returned by RequestedStep.ValidateAll() if the designated constraints
// aren't met.
type RequestedStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestedStepMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestedStepMultiError) AllErrors() []error { return m }

// RequestedStepValidationError is the validation error returned by
// RequestedStep.Validate if the designated constraints aren't met.
type RequestedStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestedStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestedStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestedStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestedStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestedStepValidationError) ErrorName() string { return "RequestedStepValidationError" }

// Error satisfies the builtin error interface
func (e RequestedStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestedStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestedStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestedStepValidationError{}

// Validate checks the field values on LoggerConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoggerConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggerConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoggerConfigMultiError, or
// nil if none found.
func (m *LoggerConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggerConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := LoggerConfig_LogLevel_name[int32(m.GetLogLevel())]; !ok {
		err := LoggerConfigValidationError{
			field:  "LogLevel",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := LoggerConfig_LogMode_name[int32(m.GetLogMode())]; !ok {
		err := LoggerConfigValidationError{
			field:  "LogMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoggerConfigMultiError(errors)
	}

	return nil
}

// LoggerConfigMultiError is an error wrapping multiple validation errors
// returned by LoggerConfig.ValidateAll() if the designated constraints aren't met.
type LoggerConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerConfigMultiError) AllErrors() []error { return m }

// LoggerConfigValidationError is the validation error returned by
// LoggerConfig.Validate if the designated constraints aren't met.
type LoggerConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerConfigValidationError) ErrorName() string { return "LoggerConfigValidationError" }

// Error satisfies the builtin error interface
func (e LoggerConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggerConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerConfigValidationError{}

// Validate checks the field values on StepContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StepContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StepContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StepContextMultiError, or
// nil if none found.
func (m *StepContext) ValidateAll() error {
	return m.validate(true)
}

func (m *StepContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StepContextValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBenchmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBenchmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StepContextValidationError{
				field:  "Benchmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StepContextValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StepContextValidationError{
				field:  "Step",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StepContextMultiError(errors)
	}

	return nil
}

// StepContextMultiError is an error wrapping multiple validation errors
// returned by StepContext.ValidateAll() if the designated constraints aren't met.
type StepContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StepContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StepContextMultiError) AllErrors() []error { return m }

// StepContextValidationError is the validation error returned by
// StepContext.Validate if the designated constraints aren't met.
type StepContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepContextValidationError) ErrorName() string { return "StepContextValidationError" }

// Error satisfies the builtin error interface
func (e StepContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStepContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepContextValidationError{}

// Validate checks the field values on RunConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunConfigMultiError, or nil
// if none found.
func (m *RunConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RunConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if m.GetSeed() < 0 {
		err := RunConfigValidationError{
			field:  "Seed",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDriver() == nil {
		err := RunConfigValidationError{
			field:  "Driver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunConfigValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGoExecutor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "GoExecutor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "GoExecutor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGoExecutor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunConfigValidationError{
				field:  "GoExecutor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetK6Executor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "K6Executor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "K6Executor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK6Executor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunConfigValidationError{
				field:  "K6Executor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetSteps()) < 1 {
		err := RunConfigValidationError{
			field:  "Steps",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if item == nil {
			err := RunConfigValidationError{
				field:  fmt.Sprintf("Steps[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunConfigValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunConfigValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunConfigValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLogger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunConfigValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunConfigValidationError{
				field:  "Logger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return RunConfigMultiError(errors)
	}

	return nil
}

// RunConfigMultiError is an error wrapping multiple validation errors returned
// by RunConfig.ValidateAll() if the designated constraints aren't met.
type RunConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunConfigMultiError) AllErrors() []error { return m }

// RunConfigValidationError is the validation error returned by
// RunConfig.Validate if the designated constraints aren't met.
type RunConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunConfigValidationError) ErrorName() string { return "RunConfigValidationError" }

// Error satisfies the builtin error interface
func (e RunConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunConfigValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if m.GetRun() == nil {
		err := ConfigValidationError{
			field:  "Run",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBenchmark() == nil {
		err := ConfigValidationError{
			field:  "Benchmark",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBenchmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBenchmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Benchmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}
