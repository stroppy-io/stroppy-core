// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v4.23.4
// source: descriptor.proto

package proto

import (
	_ "github.com/stroppy-io/stroppy-core/pkg/proto/gen/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// TransactionIsolationLevel defines the isolation level for a database transaction.
type TxIsolationLevel int32

const (
	TxIsolationLevel_TX_ISOLATION_LEVEL_UNSPECIFIED      TxIsolationLevel = 0
	TxIsolationLevel_TX_ISOLATION_LEVEL_READ_UNCOMMITTED TxIsolationLevel = 1
	TxIsolationLevel_TX_ISOLATION_LEVEL_READ_COMMITTED   TxIsolationLevel = 2
	TxIsolationLevel_TX_ISOLATION_LEVEL_REPEATABLE_READ  TxIsolationLevel = 3
	TxIsolationLevel_TX_ISOLATION_LEVEL_SERIALIZABLE     TxIsolationLevel = 4
)

// Enum value maps for TxIsolationLevel.
var (
	TxIsolationLevel_name = map[int32]string{
		0: "TX_ISOLATION_LEVEL_UNSPECIFIED",
		1: "TX_ISOLATION_LEVEL_READ_UNCOMMITTED",
		2: "TX_ISOLATION_LEVEL_READ_COMMITTED",
		3: "TX_ISOLATION_LEVEL_REPEATABLE_READ",
		4: "TX_ISOLATION_LEVEL_SERIALIZABLE",
	}
	TxIsolationLevel_value = map[string]int32{
		"TX_ISOLATION_LEVEL_UNSPECIFIED":      0,
		"TX_ISOLATION_LEVEL_READ_UNCOMMITTED": 1,
		"TX_ISOLATION_LEVEL_READ_COMMITTED":   2,
		"TX_ISOLATION_LEVEL_REPEATABLE_READ":  3,
		"TX_ISOLATION_LEVEL_SERIALIZABLE":     4,
	}
)

func (x TxIsolationLevel) Enum() *TxIsolationLevel {
	p := new(TxIsolationLevel)
	*p = x
	return p
}

func (x TxIsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxIsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_descriptor_proto_enumTypes[0].Descriptor()
}

func (TxIsolationLevel) Type() protoreflect.EnumType {
	return &file_descriptor_proto_enumTypes[0]
}

func (x TxIsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxIsolationLevel.Descriptor instead.
func (TxIsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{0}
}

// *
// IndexDescriptor defines the structure of a database index.
type IndexDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the index
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of column names that are part of this index
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// * Type of index (e.g., BTREE, HASH, etc.)
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// * Whether this is a unique index
	Unique bool `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// * Database-specific index properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexDescriptor) Reset() {
	*x = IndexDescriptor{}
	mi := &file_descriptor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDescriptor) ProtoMessage() {}

func (x *IndexDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDescriptor.ProtoReflect.Descriptor instead.
func (*IndexDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{0}
}

func (x *IndexDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexDescriptor) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IndexDescriptor) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// ColumnDescriptor defines the structure of a database column.
type ColumnDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * SQL data type of the column
	SqlType string `protobuf:"bytes,2,opt,name=sql_type,json=sqlType,proto3" json:"sql_type,omitempty"`
	// * Whether the column can be NULL
	Nullable bool `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// * Whether the column is part of the primary key
	PrimaryKey bool `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// * Whether the column has a UNIQUE constraint
	Unique bool `protobuf:"varint,5,opt,name=unique,proto3" json:"unique,omitempty"`
	// * SQL constraint definition for the column
	Constraint    string `protobuf:"bytes,6,opt,name=constraint,proto3" json:"constraint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnDescriptor) Reset() {
	*x = ColumnDescriptor{}
	mi := &file_descriptor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDescriptor) ProtoMessage() {}

func (x *ColumnDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDescriptor.ProtoReflect.Descriptor instead.
func (*ColumnDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnDescriptor) GetSqlType() string {
	if x != nil {
		return x.SqlType
	}
	return ""
}

func (x *ColumnDescriptor) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ColumnDescriptor) GetPrimaryKey() bool {
	if x != nil {
		return x.PrimaryKey
	}
	return false
}

func (x *ColumnDescriptor) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *ColumnDescriptor) GetConstraint() string {
	if x != nil {
		return x.Constraint
	}
	return ""
}

// *
// TableDescriptor defines the structure of a database table.
type TableDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the table
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of indexes defined on this table
	TableIndexes []*IndexDescriptor `protobuf:"bytes,3,rep,name=table_indexes,json=tableIndexes,proto3" json:"table_indexes,omitempty"`
	// * Table-level constraints
	Constraint string `protobuf:"bytes,5,opt,name=constraint,proto3" json:"constraint,omitempty"`
	// * Database-specific table properties
	DbSpecific *Value_Struct `protobuf:"bytes,6,opt,name=db_specific,json=dbSpecific,proto3" json:"db_specific,omitempty"`
	// * Columns defined in this table
	Columns       []*ColumnDescriptor `protobuf:"bytes,100,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableDescriptor) Reset() {
	*x = TableDescriptor{}
	mi := &file_descriptor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDescriptor) ProtoMessage() {}

func (x *TableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDescriptor.ProtoReflect.Descriptor instead.
func (*TableDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{2}
}

func (x *TableDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableDescriptor) GetTableIndexes() []*IndexDescriptor {
	if x != nil {
		return x.TableIndexes
	}
	return nil
}

func (x *TableDescriptor) GetConstraint() string {
	if x != nil {
		return x.Constraint
	}
	return ""
}

func (x *TableDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

func (x *TableDescriptor) GetColumns() []*ColumnDescriptor {
	if x != nil {
		return x.Columns
	}
	return nil
}

// *
// QueryParamDescriptor defines a parameter that can be used in a query.
type QueryParamDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the parameter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Regular expression pattern to replace with the parameter value default is "${<param_name>}"
	ReplaceRegex string `protobuf:"bytes,2,opt,name=replace_regex,json=replaceRegex,proto3" json:"replace_regex,omitempty"`
	// * Rule for generating parameter values
	GenerationRule *Generation_Rule `protobuf:"bytes,3,opt,name=generation_rule,json=generationRule,proto3" json:"generation_rule,omitempty"`
	// * Database-specific parameter properties
	DbSpecific    *Value_Struct `protobuf:"bytes,4,opt,name=db_specific,json=dbSpecific,proto3" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParamDescriptor) Reset() {
	*x = QueryParamDescriptor{}
	mi := &file_descriptor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParamDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamDescriptor) ProtoMessage() {}

func (x *QueryParamDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamDescriptor.ProtoReflect.Descriptor instead.
func (*QueryParamDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{3}
}

func (x *QueryParamDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParamDescriptor) GetReplaceRegex() string {
	if x != nil {
		return x.ReplaceRegex
	}
	return ""
}

func (x *QueryParamDescriptor) GetGenerationRule() *Generation_Rule {
	if x != nil {
		return x.GenerationRule
	}
	return nil
}

func (x *QueryParamDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// QueryDescriptor defines a database query with its parameters and execution count.
type QueryDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * SQL query text
	Sql string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	// * Parameters used in the query
	Params []*QueryParamDescriptor `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	// * Number of times to execute this query
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// * Database-specific query properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDescriptor) Reset() {
	*x = QueryDescriptor{}
	mi := &file_descriptor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDescriptor) ProtoMessage() {}

func (x *QueryDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDescriptor.ProtoReflect.Descriptor instead.
func (*QueryDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{4}
}

func (x *QueryDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDescriptor) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryDescriptor) GetParams() []*QueryParamDescriptor {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryDescriptor) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *QueryDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// TransactionDescriptor defines a database transaction with its queries and execution count.
type TransactionDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the transaction
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Transaction isolation level
	IsolationLevel TxIsolationLevel `protobuf:"varint,2,opt,name=isolation_level,json=isolationLevel,proto3,enum=stroppy.TxIsolationLevel" json:"isolation_level,omitempty"`
	// * List of queries to execute in this transaction
	Queries []*QueryDescriptor `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	// * Number of times to execute this transaction
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// * Database-specific transaction properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionDescriptor) Reset() {
	*x = TransactionDescriptor{}
	mi := &file_descriptor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDescriptor) ProtoMessage() {}

func (x *TransactionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDescriptor.ProtoReflect.Descriptor instead.
func (*TransactionDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionDescriptor) GetIsolationLevel() TxIsolationLevel {
	if x != nil {
		return x.IsolationLevel
	}
	return TxIsolationLevel_TX_ISOLATION_LEVEL_UNSPECIFIED
}

func (x *TransactionDescriptor) GetQueries() []*QueryDescriptor {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *TransactionDescriptor) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TransactionDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// StepQueryDescriptor represents a single query or table creation operation
// that can be part of a benchmark step.
type StepQueryDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*StepQueryDescriptor_CreateTable
	//	*StepQueryDescriptor_Query
	//	*StepQueryDescriptor_Transaction
	Type isStepQueryDescriptor_Type `protobuf_oneof:"type"`
	// * Whether to execute this operation asynchronously
	Async         bool `protobuf:"varint,100,opt,name=async,proto3" json:"async,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepQueryDescriptor) Reset() {
	*x = StepQueryDescriptor{}
	mi := &file_descriptor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepQueryDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepQueryDescriptor) ProtoMessage() {}

func (x *StepQueryDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepQueryDescriptor.ProtoReflect.Descriptor instead.
func (*StepQueryDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{6}
}

func (x *StepQueryDescriptor) GetType() isStepQueryDescriptor_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StepQueryDescriptor) GetCreateTable() *TableDescriptor {
	if x != nil {
		if x, ok := x.Type.(*StepQueryDescriptor_CreateTable); ok {
			return x.CreateTable
		}
	}
	return nil
}

func (x *StepQueryDescriptor) GetQuery() *QueryDescriptor {
	if x != nil {
		if x, ok := x.Type.(*StepQueryDescriptor_Query); ok {
			return x.Query
		}
	}
	return nil
}

func (x *StepQueryDescriptor) GetTransaction() *TransactionDescriptor {
	if x != nil {
		if x, ok := x.Type.(*StepQueryDescriptor_Transaction); ok {
			return x.Transaction
		}
	}
	return nil
}

func (x *StepQueryDescriptor) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

type isStepQueryDescriptor_Type interface {
	isStepQueryDescriptor_Type()
}

type StepQueryDescriptor_CreateTable struct {
	// * Table creation operation
	CreateTable *TableDescriptor `protobuf:"bytes,1,opt,name=create_table,json=createTable,proto3,oneof"`
}

type StepQueryDescriptor_Query struct {
	// * Query execution operation
	Query *QueryDescriptor `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type StepQueryDescriptor_Transaction struct {
	// * Transaction execution operation
	Transaction *TransactionDescriptor `protobuf:"bytes,4,opt,name=transaction,proto3,oneof"`
}

func (*StepQueryDescriptor_CreateTable) isStepQueryDescriptor_Type() {}

func (*StepQueryDescriptor_Query) isStepQueryDescriptor_Type() {}

func (*StepQueryDescriptor_Transaction) isStepQueryDescriptor_Type() {}

// *
// StepDescriptor represents a logical step in a benchmark.
type StepDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the step
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of operations to perform in this step
	Queries []*StepQueryDescriptor `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	// * Whether to execute all operations in this step asynchronously
	Async         bool `protobuf:"varint,3,opt,name=async,proto3" json:"async,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepDescriptor) Reset() {
	*x = StepDescriptor{}
	mi := &file_descriptor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepDescriptor) ProtoMessage() {}

func (x *StepDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepDescriptor.ProtoReflect.Descriptor instead.
func (*StepDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{7}
}

func (x *StepDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StepDescriptor) GetQueries() []*StepQueryDescriptor {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *StepDescriptor) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

// *
// BenchmarkDescriptor defines a complete benchmark consisting of multiple steps.
type BenchmarkDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the benchmark
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of steps to execute in the benchmark
	Steps         []*StepDescriptor `protobuf:"bytes,100,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BenchmarkDescriptor) Reset() {
	*x = BenchmarkDescriptor{}
	mi := &file_descriptor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkDescriptor) ProtoMessage() {}

func (x *BenchmarkDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_descriptor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkDescriptor.ProtoReflect.Descriptor instead.
func (*BenchmarkDescriptor) Descriptor() ([]byte, []int) {
	return file_descriptor_proto_rawDescGZIP(), []int{8}
}

func (x *BenchmarkDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkDescriptor) GetSteps() []*StepDescriptor {
	if x != nil {
		return x.Steps
	}
	return nil
}

var File_descriptor_proto protoreflect.FileDescriptor

const file_descriptor_proto_rawDesc = "" +
	"\n" +
	"\x10descriptor.proto\x12\astroppy\x1a\fcommon.proto\x1a\x1bgen/validate/validate.proto\"\xd2\x01\n" +
	"\x0fIndexDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12)\n" +
	"\acolumns\x18\x02 \x03(\tB\x0f\xfaB\f\x92\x01\t\x18\x01\"\x05\x8a\x01\x02\x10\x01R\acolumns\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x16\n" +
	"\x06unique\x18\x04 \x01(\bR\x06unique\x12;\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01B\x0e\n" +
	"\f_db_specific\"\xc8\x01\n" +
	"\x10ColumnDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\"\n" +
	"\bsql_type\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\asqlType\x12\x1a\n" +
	"\bnullable\x18\x03 \x01(\bR\bnullable\x12\x1f\n" +
	"\vprimary_key\x18\x04 \x01(\bR\n" +
	"primaryKey\x12\x16\n" +
	"\x06unique\x18\x05 \x01(\bR\x06unique\x12\x1e\n" +
	"\n" +
	"constraint\x18\x06 \x01(\tR\n" +
	"constraint\"\x89\x02\n" +
	"\x0fTableDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12L\n" +
	"\rtable_indexes\x18\x03 \x03(\v2\x18.stroppy.IndexDescriptorB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x8a\x01\x02\x10\x01R\ftableIndexes\x12\x1e\n" +
	"\n" +
	"constraint\x18\x05 \x01(\tR\n" +
	"constraint\x126\n" +
	"\vdb_specific\x18\x06 \x01(\v2\x15.stroppy.Value.StructR\n" +
	"dbSpecific\x123\n" +
	"\acolumns\x18d \x03(\v2\x19.stroppy.ColumnDescriptorR\acolumns\"\xdd\x01\n" +
	"\x14QueryParamDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12#\n" +
	"\rreplace_regex\x18\x02 \x01(\tR\freplaceRegex\x12K\n" +
	"\x0fgeneration_rule\x18\x03 \x01(\v2\x18.stroppy.Generation.RuleB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x0egenerationRule\x126\n" +
	"\vdb_specific\x18\x04 \x01(\v2\x15.stroppy.Value.StructR\n" +
	"dbSpecific\"\xe6\x01\n" +
	"\x0fQueryDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\x19\n" +
	"\x03sql\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x03sql\x12D\n" +
	"\x06params\x18\x03 \x03(\v2\x1d.stroppy.QueryParamDescriptorB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x8a\x01\x02\x10\x01R\x06params\x12\x1d\n" +
	"\x05count\x18\x04 \x01(\x04B\a\xfaB\x042\x02 \x00R\x05count\x126\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructR\n" +
	"dbSpecific\"\x94\x02\n" +
	"\x15TransactionDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12B\n" +
	"\x0fisolation_level\x18\x02 \x01(\x0e2\x19.stroppy.TxIsolationLevelR\x0eisolationLevel\x12C\n" +
	"\aqueries\x18\x03 \x03(\v2\x18.stroppy.QueryDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\aqueries\x12\x1d\n" +
	"\x05count\x18\x04 \x01(\x04B\a\xfaB\x042\x02 \x00R\x05count\x126\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructR\n" +
	"dbSpecific\"\xed\x01\n" +
	"\x13StepQueryDescriptor\x12=\n" +
	"\fcreate_table\x18\x01 \x01(\v2\x18.stroppy.TableDescriptorH\x00R\vcreateTable\x120\n" +
	"\x05query\x18\x02 \x01(\v2\x18.stroppy.QueryDescriptorH\x00R\x05query\x12B\n" +
	"\vtransaction\x18\x04 \x01(\v2\x1e.stroppy.TransactionDescriptorH\x00R\vtransaction\x12\x14\n" +
	"\x05async\x18d \x01(\bR\x05asyncB\v\n" +
	"\x04type\x12\x03\xf8B\x01\"\x8c\x01\n" +
	"\x0eStepDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12G\n" +
	"\aqueries\x18\x02 \x03(\v2\x1c.stroppy.StepQueryDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\aqueries\x12\x14\n" +
	"\x05async\x18\x03 \x01(\bR\x05async\"r\n" +
	"\x13BenchmarkDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12>\n" +
	"\x05steps\x18d \x03(\v2\x17.stroppy.StepDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\x05steps*\xd3\x01\n" +
	"\x10TxIsolationLevel\x12\"\n" +
	"\x1eTX_ISOLATION_LEVEL_UNSPECIFIED\x10\x00\x12'\n" +
	"#TX_ISOLATION_LEVEL_READ_UNCOMMITTED\x10\x01\x12%\n" +
	"!TX_ISOLATION_LEVEL_READ_COMMITTED\x10\x02\x12&\n" +
	"\"TX_ISOLATION_LEVEL_REPEATABLE_READ\x10\x03\x12#\n" +
	"\x1fTX_ISOLATION_LEVEL_SERIALIZABLE\x10\x04B.Z,github.com/stroppy-io/stroppy-core/pkg/protob\x06proto3"

var (
	file_descriptor_proto_rawDescOnce sync.Once
	file_descriptor_proto_rawDescData []byte
)

func file_descriptor_proto_rawDescGZIP() []byte {
	file_descriptor_proto_rawDescOnce.Do(func() {
		file_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_descriptor_proto_rawDesc), len(file_descriptor_proto_rawDesc)))
	})
	return file_descriptor_proto_rawDescData
}

var file_descriptor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_descriptor_proto_goTypes = []any{
	(TxIsolationLevel)(0),         // 0: stroppy.TxIsolationLevel
	(*IndexDescriptor)(nil),       // 1: stroppy.IndexDescriptor
	(*ColumnDescriptor)(nil),      // 2: stroppy.ColumnDescriptor
	(*TableDescriptor)(nil),       // 3: stroppy.TableDescriptor
	(*QueryParamDescriptor)(nil),  // 4: stroppy.QueryParamDescriptor
	(*QueryDescriptor)(nil),       // 5: stroppy.QueryDescriptor
	(*TransactionDescriptor)(nil), // 6: stroppy.TransactionDescriptor
	(*StepQueryDescriptor)(nil),   // 7: stroppy.StepQueryDescriptor
	(*StepDescriptor)(nil),        // 8: stroppy.StepDescriptor
	(*BenchmarkDescriptor)(nil),   // 9: stroppy.BenchmarkDescriptor
	(*Value_Struct)(nil),          // 10: stroppy.Value.Struct
	(*Generation_Rule)(nil),       // 11: stroppy.Generation.Rule
}
var file_descriptor_proto_depIdxs = []int32{
	10, // 0: stroppy.IndexDescriptor.db_specific:type_name -> stroppy.Value.Struct
	1,  // 1: stroppy.TableDescriptor.table_indexes:type_name -> stroppy.IndexDescriptor
	10, // 2: stroppy.TableDescriptor.db_specific:type_name -> stroppy.Value.Struct
	2,  // 3: stroppy.TableDescriptor.columns:type_name -> stroppy.ColumnDescriptor
	11, // 4: stroppy.QueryParamDescriptor.generation_rule:type_name -> stroppy.Generation.Rule
	10, // 5: stroppy.QueryParamDescriptor.db_specific:type_name -> stroppy.Value.Struct
	4,  // 6: stroppy.QueryDescriptor.params:type_name -> stroppy.QueryParamDescriptor
	10, // 7: stroppy.QueryDescriptor.db_specific:type_name -> stroppy.Value.Struct
	0,  // 8: stroppy.TransactionDescriptor.isolation_level:type_name -> stroppy.TxIsolationLevel
	5,  // 9: stroppy.TransactionDescriptor.queries:type_name -> stroppy.QueryDescriptor
	10, // 10: stroppy.TransactionDescriptor.db_specific:type_name -> stroppy.Value.Struct
	3,  // 11: stroppy.StepQueryDescriptor.create_table:type_name -> stroppy.TableDescriptor
	5,  // 12: stroppy.StepQueryDescriptor.query:type_name -> stroppy.QueryDescriptor
	6,  // 13: stroppy.StepQueryDescriptor.transaction:type_name -> stroppy.TransactionDescriptor
	7,  // 14: stroppy.StepDescriptor.queries:type_name -> stroppy.StepQueryDescriptor
	8,  // 15: stroppy.BenchmarkDescriptor.steps:type_name -> stroppy.StepDescriptor
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_descriptor_proto_init() }
func file_descriptor_proto_init() {
	if File_descriptor_proto != nil {
		return
	}
	file_common_proto_init()
	file_descriptor_proto_msgTypes[0].OneofWrappers = []any{}
	file_descriptor_proto_msgTypes[6].OneofWrappers = []any{
		(*StepQueryDescriptor_CreateTable)(nil),
		(*StepQueryDescriptor_Query)(nil),
		(*StepQueryDescriptor_Transaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_descriptor_proto_rawDesc), len(file_descriptor_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_descriptor_proto_goTypes,
		DependencyIndexes: file_descriptor_proto_depIdxs,
		EnumInfos:         file_descriptor_proto_enumTypes,
		MessageInfos:      file_descriptor_proto_msgTypes,
	}.Build()
	File_descriptor_proto = out.File
	file_descriptor_proto_goTypes = nil
	file_descriptor_proto_depIdxs = nil
}
