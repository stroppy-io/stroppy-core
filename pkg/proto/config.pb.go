// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: config.proto

package proto

import (
	_ "github.com/picodata/stroppy/pkg/proto/gen/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestedStep_ExecutorType int32

const (
	RequestedStep_EXECUTOR_TYPE_GO RequestedStep_ExecutorType = 0
	RequestedStep_EXECUTOR_TYPE_K6 RequestedStep_ExecutorType = 1
)

// Enum value maps for RequestedStep_ExecutorType.
var (
	RequestedStep_ExecutorType_name = map[int32]string{
		0: "EXECUTOR_TYPE_GO",
		1: "EXECUTOR_TYPE_K6",
	}
	RequestedStep_ExecutorType_value = map[string]int32{
		"EXECUTOR_TYPE_GO": 0,
		"EXECUTOR_TYPE_K6": 1,
	}
)

func (x RequestedStep_ExecutorType) Enum() *RequestedStep_ExecutorType {
	p := new(RequestedStep_ExecutorType)
	*p = x
	return p
}

func (x RequestedStep_ExecutorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestedStep_ExecutorType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (RequestedStep_ExecutorType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x RequestedStep_ExecutorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestedStep_ExecutorType.Descriptor instead.
func (RequestedStep_ExecutorType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4, 0}
}

type LoggerConfig_LogLevel int32

const (
	LoggerConfig_LOG_LEVEL_DEBUG LoggerConfig_LogLevel = 0
	LoggerConfig_LOG_LEVEL_INFO  LoggerConfig_LogLevel = 1
	LoggerConfig_LOG_LEVEL_WARN  LoggerConfig_LogLevel = 2
	LoggerConfig_LOG_LEVEL_ERROR LoggerConfig_LogLevel = 3
	LoggerConfig_LOG_LEVEL_FATAL LoggerConfig_LogLevel = 4
)

// Enum value maps for LoggerConfig_LogLevel.
var (
	LoggerConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_DEBUG",
		1: "LOG_LEVEL_INFO",
		2: "LOG_LEVEL_WARN",
		3: "LOG_LEVEL_ERROR",
		4: "LOG_LEVEL_FATAL",
	}
	LoggerConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_DEBUG": 0,
		"LOG_LEVEL_INFO":  1,
		"LOG_LEVEL_WARN":  2,
		"LOG_LEVEL_ERROR": 3,
		"LOG_LEVEL_FATAL": 4,
	}
)

func (x LoggerConfig_LogLevel) Enum() *LoggerConfig_LogLevel {
	p := new(LoggerConfig_LogLevel)
	*p = x
	return p
}

func (x LoggerConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (LoggerConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x LoggerConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerConfig_LogLevel.Descriptor instead.
func (LoggerConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 0}
}

type LoggerConfig_LogMode int32

const (
	LoggerConfig_LOG_MODE_DEVELOPMENT LoggerConfig_LogMode = 0
	LoggerConfig_LOG_MODE_PRODUCTION  LoggerConfig_LogMode = 1
)

// Enum value maps for LoggerConfig_LogMode.
var (
	LoggerConfig_LogMode_name = map[int32]string{
		0: "LOG_MODE_DEVELOPMENT",
		1: "LOG_MODE_PRODUCTION",
	}
	LoggerConfig_LogMode_value = map[string]int32{
		"LOG_MODE_DEVELOPMENT": 0,
		"LOG_MODE_PRODUCTION":  1,
	}
)

func (x LoggerConfig_LogMode) Enum() *LoggerConfig_LogMode {
	p := new(LoggerConfig_LogMode)
	*p = x
	return p
}

func (x LoggerConfig_LogMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerConfig_LogMode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (LoggerConfig_LogMode) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x LoggerConfig_LogMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerConfig_LogMode.Descriptor instead.
func (LoggerConfig_LogMode) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 1}
}

// *
// OtlpExport contains configuration for exporting metrics via OpenTelemetry Protocol (OTLP).
// It specifies the endpoint and metrics prefix for telemetry data export.
type OtlpExport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * gRPC endpoint for OpenTelemetry collector
	OtlpGrpcEndpoint *string `protobuf:"bytes,1,opt,name=otlp_grpc_endpoint,json=otlpGrpcEndpoint,proto3,oneof" json:"otlp_grpc_endpoint,omitempty"`
	// * Prefix to be added to all exported metrics
	OtlpMetricsPrefix *string `protobuf:"bytes,2,opt,name=otlp_metrics_prefix,json=otlpMetricsPrefix,proto3,oneof" json:"otlp_metrics_prefix,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OtlpExport) Reset() {
	*x = OtlpExport{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtlpExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtlpExport) ProtoMessage() {}

func (x *OtlpExport) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtlpExport.ProtoReflect.Descriptor instead.
func (*OtlpExport) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *OtlpExport) GetOtlpGrpcEndpoint() string {
	if x != nil && x.OtlpGrpcEndpoint != nil {
		return *x.OtlpGrpcEndpoint
	}
	return ""
}

func (x *OtlpExport) GetOtlpMetricsPrefix() string {
	if x != nil && x.OtlpMetricsPrefix != nil {
		return *x.OtlpMetricsPrefix
	}
	return ""
}

// *
// GoExecutor contains configuration specific to Go-based test execution.
// It controls Go runtime parameters and error handling behavior.
type GoExecutor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Maximum number of OS threads that the Go runtime can use (0 = use default)
	GoMaxProc *uint64 `protobuf:"varint,1,opt,name=go_max_proc,json=goMaxProc,proto3,oneof" json:"go_max_proc,omitempty"`
	// * Whether to cancel execution on first error
	CancelOnError *bool `protobuf:"varint,2,opt,name=cancel_on_error,json=cancelOnError,proto3,oneof" json:"cancel_on_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoExecutor) Reset() {
	*x = GoExecutor{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoExecutor) ProtoMessage() {}

func (x *GoExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoExecutor.ProtoReflect.Descriptor instead.
func (*GoExecutor) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *GoExecutor) GetGoMaxProc() uint64 {
	if x != nil && x.GoMaxProc != nil {
		return *x.GoMaxProc
	}
	return 0
}

func (x *GoExecutor) GetCancelOnError() bool {
	if x != nil && x.CancelOnError != nil {
		return *x.CancelOnError
	}
	return false
}

// *
// K6Executor contains configuration for k6 load testing tool integration.
// It contains paths to the k6 binary and the k6 test script, as well as
// additional arguments to pass to the k6 binary.
type K6Executor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Path to the k6 binary
	K6BinaryPath string `protobuf:"bytes,1,opt,name=k6_binary_path,json=k6BinaryPath,proto3" json:"k6_binary_path,omitempty"`
	// * Additional arguments to pass to the k6 binary
	K6BinaryArgs []string `protobuf:"bytes,2,rep,name=k6_binary_args,json=k6BinaryArgs,proto3" json:"k6_binary_args,omitempty"`
	// * Path to the k6 test script
	K6ScriptPath string `protobuf:"bytes,3,opt,name=k6_script_path,json=k6ScriptPath,proto3" json:"k6_script_path,omitempty"`
	// * Timeout for k6 setup phase
	K6SetupTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=k6_setup_timeout,json=k6SetupTimeout,proto3,oneof" json:"k6_setup_timeout,omitempty"`
	// * Number of virtual users
	K6Vus *uint64 `protobuf:"varint,12,opt,name=k6_vus,json=k6Vus,proto3,oneof" json:"k6_vus,omitempty"`
	// * Maximum number of virtual users
	K6MaxVus *uint64 `protobuf:"varint,13,opt,name=k6_max_vus,json=k6MaxVus,proto3,oneof" json:"k6_max_vus,omitempty"`
	// * Number of requests per second
	K6Rate *uint64 `protobuf:"varint,14,opt,name=k6_rate,json=k6Rate,proto3,oneof" json:"k6_rate,omitempty"`
	// * Duration of the test
	K6Duration *durationpb.Duration `protobuf:"bytes,15,opt,name=k6_duration,json=k6Duration,proto3,oneof" json:"k6_duration,omitempty"`
	// * OpenTelemetry export configuration
	OtlpExport    *OtlpExport `protobuf:"bytes,100,opt,name=otlp_export,json=otlpExport,proto3,oneof" json:"otlp_export,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *K6Executor) Reset() {
	*x = K6Executor{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K6Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K6Executor) ProtoMessage() {}

func (x *K6Executor) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K6Executor.ProtoReflect.Descriptor instead.
func (*K6Executor) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *K6Executor) GetK6BinaryPath() string {
	if x != nil {
		return x.K6BinaryPath
	}
	return ""
}

func (x *K6Executor) GetK6BinaryArgs() []string {
	if x != nil {
		return x.K6BinaryArgs
	}
	return nil
}

func (x *K6Executor) GetK6ScriptPath() string {
	if x != nil {
		return x.K6ScriptPath
	}
	return ""
}

func (x *K6Executor) GetK6SetupTimeout() *durationpb.Duration {
	if x != nil {
		return x.K6SetupTimeout
	}
	return nil
}

func (x *K6Executor) GetK6Vus() uint64 {
	if x != nil && x.K6Vus != nil {
		return *x.K6Vus
	}
	return 0
}

func (x *K6Executor) GetK6MaxVus() uint64 {
	if x != nil && x.K6MaxVus != nil {
		return *x.K6MaxVus
	}
	return 0
}

func (x *K6Executor) GetK6Rate() uint64 {
	if x != nil && x.K6Rate != nil {
		return *x.K6Rate
	}
	return 0
}

func (x *K6Executor) GetK6Duration() *durationpb.Duration {
	if x != nil {
		return x.K6Duration
	}
	return nil
}

func (x *K6Executor) GetOtlpExport() *OtlpExport {
	if x != nil {
		return x.OtlpExport
	}
	return nil
}

// *
// DriverConfig contains configuration for connecting to a database driver.
// It includes the driver plugin path, connection URL, and database-specific settings.
type DriverConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Path to the driver plugin binary
	DriverPluginPath string `protobuf:"bytes,1,opt,name=driver_plugin_path,json=driverPluginPath,proto3" json:"driver_plugin_path,omitempty"`
	// * Additional arguments for the driver plugin
	DriverPluginArgs []string `protobuf:"bytes,2,rep,name=driver_plugin_args,json=driverPluginArgs,proto3" json:"driver_plugin_args,omitempty"`
	// * Database connection URL
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// * Database-specific configuration options
	DbSpecific    *Value_Struct `protobuf:"bytes,4,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriverConfig) Reset() {
	*x = DriverConfig{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverConfig) ProtoMessage() {}

func (x *DriverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverConfig.ProtoReflect.Descriptor instead.
func (*DriverConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *DriverConfig) GetDriverPluginPath() string {
	if x != nil {
		return x.DriverPluginPath
	}
	return ""
}

func (x *DriverConfig) GetDriverPluginArgs() []string {
	if x != nil {
		return x.DriverPluginArgs
	}
	return nil
}

func (x *DriverConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DriverConfig) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// RequestedStep defines a step that should be executed during the benchmark.
// It specifies the step name and the type of executor to use.
type RequestedStep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Unique name of the step
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Type of executor to use for this step
	Executor      *RequestedStep_ExecutorType `protobuf:"varint,2,opt,name=executor,proto3,enum=stroppy.RequestedStep_ExecutorType,oneof" json:"executor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestedStep) Reset() {
	*x = RequestedStep{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestedStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedStep) ProtoMessage() {}

func (x *RequestedStep) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedStep.ProtoReflect.Descriptor instead.
func (*RequestedStep) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *RequestedStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestedStep) GetExecutor() RequestedStep_ExecutorType {
	if x != nil && x.Executor != nil {
		return *x.Executor
	}
	return RequestedStep_EXECUTOR_TYPE_GO
}

// *
// LoggerConfig contains configuration for the logging system.
// It controls log levels and output formatting.
type LoggerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Minimum log level to output
	LogLevel LoggerConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=stroppy.LoggerConfig_LogLevel" json:"log_level,omitempty"`
	// * Logging mode (development or production)
	LogMode       LoggerConfig_LogMode `protobuf:"varint,2,opt,name=log_mode,json=logMode,proto3,enum=stroppy.LoggerConfig_LogMode" json:"log_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoggerConfig) Reset() {
	*x = LoggerConfig{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerConfig) ProtoMessage() {}

func (x *LoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerConfig.ProtoReflect.Descriptor instead.
func (*LoggerConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *LoggerConfig) GetLogLevel() LoggerConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LoggerConfig_LOG_LEVEL_DEBUG
}

func (x *LoggerConfig) GetLogMode() LoggerConfig_LogMode {
	if x != nil {
		return x.LogMode
	}
	return LoggerConfig_LOG_MODE_DEVELOPMENT
}

// *
// StepContext provides contextual information to a benchmark step during execution.
// It contains the current configuration and descriptors relevant to the step.
type StepContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Current run configuration
	Config *RunConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// * Benchmark descriptor
	Benchmark *BenchmarkDescriptor `protobuf:"bytes,4,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// * Current step descriptor
	Step          *StepDescriptor `protobuf:"bytes,5,opt,name=step,proto3" json:"step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepContext) Reset() {
	*x = StepContext{}
	mi := &file_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepContext) ProtoMessage() {}

func (x *StepContext) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepContext.ProtoReflect.Descriptor instead.
func (*StepContext) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *StepContext) GetConfig() *RunConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StepContext) GetBenchmark() *BenchmarkDescriptor {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

func (x *StepContext) GetStep() *StepDescriptor {
	if x != nil {
		return x.Step
	}
	return nil
}

// *
// RunConfig contains the complete configuration for a benchmark run.
type RunConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Random seed for reproducible test runs
	Seed uint64 `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	// * Path to the benchmark descriptor file
	DescriptorPath string `protobuf:"bytes,2,opt,name=descriptor_path,json=descriptorPath,proto3" json:"descriptor_path,omitempty"`
	// * Database driver configuration
	Driver *DriverConfig `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	// * Go executor configuration
	GoExecutor *GoExecutor `protobuf:"bytes,4,opt,name=go_executor,json=goExecutor,proto3" json:"go_executor,omitempty"`
	// * k6 executor configuration
	K6Executor *K6Executor `protobuf:"bytes,5,opt,name=k6_executor,json=k6Executor,proto3" json:"k6_executor,omitempty"`
	// * List of steps to execute in order
	Steps []*RequestedStep `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps,omitempty"`
	// * Logging configuration
	Logger        *LoggerConfig `protobuf:"bytes,7,opt,name=logger,proto3" json:"logger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfig) Reset() {
	*x = RunConfig{}
	mi := &file_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfig) ProtoMessage() {}

func (x *RunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfig.ProtoReflect.Descriptor instead.
func (*RunConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *RunConfig) GetSeed() uint64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RunConfig) GetDescriptorPath() string {
	if x != nil {
		return x.DescriptorPath
	}
	return ""
}

func (x *RunConfig) GetDriver() *DriverConfig {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *RunConfig) GetGoExecutor() *GoExecutor {
	if x != nil {
		return x.GoExecutor
	}
	return nil
}

func (x *RunConfig) GetK6Executor() *K6Executor {
	if x != nil {
		return x.K6Executor
	}
	return nil
}

func (x *RunConfig) GetSteps() []*RequestedStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *RunConfig) GetLogger() *LoggerConfig {
	if x != nil {
		return x.Logger
	}
	return nil
}

// *
// Config contains the complete configuration for a benchmark run.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * RunConfig contains the complete configuration for a benchmark run.
	Run *RunConfig `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	// * BenchmarkDescriptor defines a complete benchmark consisting of multiple steps.
	Benchmark     *BenchmarkDescriptor `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetRun() *RunConfig {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *Config) GetBenchmark() *BenchmarkDescriptor {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

const file_config_proto_rawDesc = "" +
	"\n" +
	"\fconfig.proto\x12\astroppy\x1a\fcommon.proto\x1a\x10descriptor.proto\x1a\x1bgen/validate/validate.proto\x1a\x1egoogle/protobuf/duration.proto\"\xa3\x01\n" +
	"\n" +
	"OtlpExport\x121\n" +
	"\x12otlp_grpc_endpoint\x18\x01 \x01(\tH\x00R\x10otlpGrpcEndpoint\x88\x01\x01\x123\n" +
	"\x13otlp_metrics_prefix\x18\x02 \x01(\tH\x01R\x11otlpMetricsPrefix\x88\x01\x01B\x15\n" +
	"\x13_otlp_grpc_endpointB\x16\n" +
	"\x14_otlp_metrics_prefix\"\x82\x01\n" +
	"\n" +
	"GoExecutor\x12#\n" +
	"\vgo_max_proc\x18\x01 \x01(\x04H\x00R\tgoMaxProc\x88\x01\x01\x12+\n" +
	"\x0fcancel_on_error\x18\x02 \x01(\bH\x01R\rcancelOnError\x88\x01\x01B\x0e\n" +
	"\f_go_max_procB\x12\n" +
	"\x10_cancel_on_error\"\xbb\x04\n" +
	"\n" +
	"K6Executor\x12.\n" +
	"\x0ek6_binary_path\x18\x01 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\fk6BinaryPath\x12.\n" +
	"\x0ek6_binary_args\x18\x02 \x03(\tB\b\xfaB\x05\x92\x01\x02\x18\x01R\fk6BinaryArgs\x12.\n" +
	"\x0ek6_script_path\x18\x03 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\fk6ScriptPath\x12H\n" +
	"\x10k6_setup_timeout\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationH\x00R\x0ek6SetupTimeout\x88\x01\x01\x12%\n" +
	"\x06k6_vus\x18\f \x01(\x04B\t\xfaB\x062\x04(\x00@\x01H\x01R\x05k6Vus\x88\x01\x01\x12,\n" +
	"\n" +
	"k6_max_vus\x18\r \x01(\x04B\t\xfaB\x062\x04(\x00@\x01H\x02R\bk6MaxVus\x88\x01\x01\x12'\n" +
	"\ak6_rate\x18\x0e \x01(\x04B\t\xfaB\x062\x04(\x00@\x01H\x03R\x06k6Rate\x88\x01\x01\x12?\n" +
	"\vk6_duration\x18\x0f \x01(\v2\x19.google.protobuf.DurationH\x04R\n" +
	"k6Duration\x88\x01\x01\x129\n" +
	"\votlp_export\x18d \x01(\v2\x13.stroppy.OtlpExportH\x05R\n" +
	"otlpExport\x88\x01\x01B\x13\n" +
	"\x11_k6_setup_timeoutB\t\n" +
	"\a_k6_vusB\r\n" +
	"\v_k6_max_vusB\n" +
	"\n" +
	"\b_k6_rateB\x0e\n" +
	"\f_k6_durationB\x0e\n" +
	"\f_otlp_export\"\xe7\x01\n" +
	"\fDriverConfig\x126\n" +
	"\x12driver_plugin_path\x18\x01 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\x10driverPluginPath\x126\n" +
	"\x12driver_plugin_args\x18\x02 \x03(\tB\b\xfaB\x05\x92\x01\x02\x18\x01R\x10driverPluginArgs\x12\x1a\n" +
	"\x03url\x18\x03 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\x03url\x12;\n" +
	"\vdb_specific\x18\x04 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01B\x0e\n" +
	"\f_db_specific\"\xc5\x01\n" +
	"\rRequestedStep\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12N\n" +
	"\bexecutor\x18\x02 \x01(\x0e2#.stroppy.RequestedStep.ExecutorTypeB\b\xfaB\x05\x82\x01\x02\x10\x01H\x00R\bexecutor\x88\x01\x01\":\n" +
	"\fExecutorType\x12\x14\n" +
	"\x10EXECUTOR_TYPE_GO\x10\x00\x12\x14\n" +
	"\x10EXECUTOR_TYPE_K6\x10\x01B\v\n" +
	"\t_executor\"\xca\x02\n" +
	"\fLoggerConfig\x12E\n" +
	"\tlog_level\x18\x01 \x01(\x0e2\x1e.stroppy.LoggerConfig.LogLevelB\b\xfaB\x05\x82\x01\x02\x10\x01R\blogLevel\x12B\n" +
	"\blog_mode\x18\x02 \x01(\x0e2\x1d.stroppy.LoggerConfig.LogModeB\b\xfaB\x05\x82\x01\x02\x10\x01R\alogMode\"q\n" +
	"\bLogLevel\x12\x13\n" +
	"\x0fLOG_LEVEL_DEBUG\x10\x00\x12\x12\n" +
	"\x0eLOG_LEVEL_INFO\x10\x01\x12\x12\n" +
	"\x0eLOG_LEVEL_WARN\x10\x02\x12\x13\n" +
	"\x0fLOG_LEVEL_ERROR\x10\x03\x12\x13\n" +
	"\x0fLOG_LEVEL_FATAL\x10\x04\"<\n" +
	"\aLogMode\x12\x18\n" +
	"\x14LOG_MODE_DEVELOPMENT\x10\x00\x12\x17\n" +
	"\x13LOG_MODE_PRODUCTION\x10\x01\"\xa2\x01\n" +
	"\vStepContext\x12*\n" +
	"\x06config\x18\x01 \x01(\v2\x12.stroppy.RunConfigR\x06config\x12:\n" +
	"\tbenchmark\x18\x04 \x01(\v2\x1c.stroppy.BenchmarkDescriptorR\tbenchmark\x12+\n" +
	"\x04step\x18\x05 \x01(\v2\x17.stroppy.StepDescriptorR\x04step\"\xee\x02\n" +
	"\tRunConfig\x12\x1b\n" +
	"\x04seed\x18\x01 \x01(\x04B\a\xfaB\x042\x02(\x00R\x04seed\x121\n" +
	"\x0fdescriptor_path\x18\x02 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\x0edescriptorPath\x127\n" +
	"\x06driver\x18\x03 \x01(\v2\x15.stroppy.DriverConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06driver\x124\n" +
	"\vgo_executor\x18\x04 \x01(\v2\x13.stroppy.GoExecutorR\n" +
	"goExecutor\x124\n" +
	"\vk6_executor\x18\x05 \x01(\v2\x13.stroppy.K6ExecutorR\n" +
	"k6Executor\x12=\n" +
	"\x05steps\x18\x06 \x03(\v2\x16.stroppy.RequestedStepB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\x05steps\x12-\n" +
	"\x06logger\x18\a \x01(\v2\x15.stroppy.LoggerConfigR\x06logger\"~\n" +
	"\x06Config\x12.\n" +
	"\x03run\x18\x01 \x01(\v2\x12.stroppy.RunConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x03run\x12D\n" +
	"\tbenchmark\x18\x02 \x01(\v2\x1c.stroppy.BenchmarkDescriptorB\b\xfaB\x05\x8a\x01\x02\x10\x01R\tbenchmarkB'Z%github.com/picodata/stroppy/pkg/protob\x06proto3"

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_config_proto_goTypes = []any{
	(RequestedStep_ExecutorType)(0), // 0: stroppy.RequestedStep.ExecutorType
	(LoggerConfig_LogLevel)(0),      // 1: stroppy.LoggerConfig.LogLevel
	(LoggerConfig_LogMode)(0),       // 2: stroppy.LoggerConfig.LogMode
	(*OtlpExport)(nil),              // 3: stroppy.OtlpExport
	(*GoExecutor)(nil),              // 4: stroppy.GoExecutor
	(*K6Executor)(nil),              // 5: stroppy.K6Executor
	(*DriverConfig)(nil),            // 6: stroppy.DriverConfig
	(*RequestedStep)(nil),           // 7: stroppy.RequestedStep
	(*LoggerConfig)(nil),            // 8: stroppy.LoggerConfig
	(*StepContext)(nil),             // 9: stroppy.StepContext
	(*RunConfig)(nil),               // 10: stroppy.RunConfig
	(*Config)(nil),                  // 11: stroppy.Config
	(*durationpb.Duration)(nil),     // 12: google.protobuf.Duration
	(*Value_Struct)(nil),            // 13: stroppy.Value.Struct
	(*BenchmarkDescriptor)(nil),     // 14: stroppy.BenchmarkDescriptor
	(*StepDescriptor)(nil),          // 15: stroppy.StepDescriptor
}
var file_config_proto_depIdxs = []int32{
	12, // 0: stroppy.K6Executor.k6_setup_timeout:type_name -> google.protobuf.Duration
	12, // 1: stroppy.K6Executor.k6_duration:type_name -> google.protobuf.Duration
	3,  // 2: stroppy.K6Executor.otlp_export:type_name -> stroppy.OtlpExport
	13, // 3: stroppy.DriverConfig.db_specific:type_name -> stroppy.Value.Struct
	0,  // 4: stroppy.RequestedStep.executor:type_name -> stroppy.RequestedStep.ExecutorType
	1,  // 5: stroppy.LoggerConfig.log_level:type_name -> stroppy.LoggerConfig.LogLevel
	2,  // 6: stroppy.LoggerConfig.log_mode:type_name -> stroppy.LoggerConfig.LogMode
	10, // 7: stroppy.StepContext.config:type_name -> stroppy.RunConfig
	14, // 8: stroppy.StepContext.benchmark:type_name -> stroppy.BenchmarkDescriptor
	15, // 9: stroppy.StepContext.step:type_name -> stroppy.StepDescriptor
	6,  // 10: stroppy.RunConfig.driver:type_name -> stroppy.DriverConfig
	4,  // 11: stroppy.RunConfig.go_executor:type_name -> stroppy.GoExecutor
	5,  // 12: stroppy.RunConfig.k6_executor:type_name -> stroppy.K6Executor
	7,  // 13: stroppy.RunConfig.steps:type_name -> stroppy.RequestedStep
	8,  // 14: stroppy.RunConfig.logger:type_name -> stroppy.LoggerConfig
	10, // 15: stroppy.Config.run:type_name -> stroppy.RunConfig
	14, // 16: stroppy.Config.benchmark:type_name -> stroppy.BenchmarkDescriptor
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	file_common_proto_init()
	file_descriptor_proto_init()
	file_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_config_proto_msgTypes[1].OneofWrappers = []any{}
	file_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_config_proto_msgTypes[3].OneofWrappers = []any{}
	file_config_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
