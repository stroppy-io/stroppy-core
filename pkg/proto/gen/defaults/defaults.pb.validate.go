// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gen/defaults/defaults.proto

package defaults

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FieldDefaults with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FieldDefaults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FieldDefaults with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FieldDefaultsMultiError, or
// nil if none found.
func (m *FieldDefaults) ValidateAll() error {
	return m.validate(true)
}

func (m *FieldDefaults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Type.(type) {
	case *FieldDefaults_Float:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Float
	case *FieldDefaults_Double:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Double
	case *FieldDefaults_Int32:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int32
	case *FieldDefaults_Int64:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64
	case *FieldDefaults_Uint32:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint32
	case *FieldDefaults_Uint64:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint64
	case *FieldDefaults_Sint32:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sint32
	case *FieldDefaults_Sint64:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sint64
	case *FieldDefaults_Fixed32:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Fixed32
	case *FieldDefaults_Fixed64:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Fixed64
	case *FieldDefaults_Sfixed32:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sfixed32
	case *FieldDefaults_Sfixed64:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Sfixed64
	case *FieldDefaults_Bool:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bool
	case *FieldDefaults_String_:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for String_
	case *FieldDefaults_Bytes:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bytes
	case *FieldDefaults_Enum:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Enum
	case *FieldDefaults_Message:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldDefaultsValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldDefaultsValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldDefaultsValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FieldDefaults_Duration:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Duration
	case *FieldDefaults_Timestamp:
		if v == nil {
			err := FieldDefaultsValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Timestamp
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FieldDefaultsMultiError(errors)
	}

	return nil
}

// FieldDefaultsMultiError is an error wrapping multiple validation errors
// returned by FieldDefaults.ValidateAll() if the designated constraints
// aren't met.
type FieldDefaultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldDefaultsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldDefaultsMultiError) AllErrors() []error { return m }

// FieldDefaultsValidationError is the validation error returned by
// FieldDefaults.Validate if the designated constraints aren't met.
type FieldDefaultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldDefaultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldDefaultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldDefaultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldDefaultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldDefaultsValidationError) ErrorName() string { return "FieldDefaultsValidationError" }

// Error satisfies the builtin error interface
func (e FieldDefaultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFieldDefaults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldDefaultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldDefaultsValidationError{}

// Validate checks the field values on MessageDefaults with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MessageDefaults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageDefaults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageDefaultsMultiError, or nil if none found.
func (m *MessageDefaults) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageDefaults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Initialize

	// no validation rules for Defaults

	if len(errors) > 0 {
		return MessageDefaultsMultiError(errors)
	}

	return nil
}

// MessageDefaultsMultiError is an error wrapping multiple validation errors
// returned by MessageDefaults.ValidateAll() if the designated constraints
// aren't met.
type MessageDefaultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageDefaultsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageDefaultsMultiError) AllErrors() []error { return m }

// MessageDefaultsValidationError is the validation error returned by
// MessageDefaults.Validate if the designated constraints aren't met.
type MessageDefaultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDefaultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDefaultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDefaultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDefaultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDefaultsValidationError) ErrorName() string { return "MessageDefaultsValidationError" }

// Error satisfies the builtin error interface
func (e MessageDefaultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDefaults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDefaultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDefaultsValidationError{}
