// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: plugins.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriverPlugin_Initialize_FullMethodName                      = "/stroppy.DriverPlugin/Initialize"
	DriverPlugin_BuildTransactionsFromUnit_FullMethodName       = "/stroppy.DriverPlugin/BuildTransactionsFromUnit"
	DriverPlugin_BuildTransactionsFromUnitStream_FullMethodName = "/stroppy.DriverPlugin/BuildTransactionsFromUnitStream"
	DriverPlugin_RunTransaction_FullMethodName                  = "/stroppy.DriverPlugin/RunTransaction"
	DriverPlugin_Teardown_FullMethodName                        = "/stroppy.DriverPlugin/Teardown"
)

// DriverPluginClient is the client API for DriverPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// DriverPlugin defines the gRPC service that database driver plugins must implement.
type DriverPluginClient interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of DriverPlugin, such as database connections.
	Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// BuildTransactionsFromUnit is called once for each StepUnitDescriptor in a step.
	// Result is a list of transactions with queries with parameters inside.
	BuildTransactionsFromUnit(ctx context.Context, in *UnitBuildContext, opts ...grpc.CallOption) (*DriverTransactionList, error)
	// *
	// BuildTransactionsFromUnitStream is the same as BuildTransactionsFromUnit,
	// but returns a stream of transactions instead of a list.
	// It is useful for drivers that support streaming transactions.
	// Also, with streaming, we can't reduce RAM usage when building and running transactions.
	// The result is a stream of transactions with queries with parameters inside.
	BuildTransactionsFromUnitStream(ctx context.Context, in *UnitBuildContext, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverTransaction], error)
	// *
	// RunTransaction is called once for each built transaction.
	// The driver must implement the transactional context of operations.
	// If the transaction has a single query, the driver may ignore transactional wrapping and run the query directly.
	RunTransaction(ctx context.Context, in *DriverTransaction, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Needs to clean up resources.
	Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type driverPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverPluginClient(cc grpc.ClientConnInterface) DriverPluginClient {
	return &driverPluginClient{cc}
}

func (c *driverPluginClient) Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) BuildTransactionsFromUnit(ctx context.Context, in *UnitBuildContext, opts ...grpc.CallOption) (*DriverTransactionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverTransactionList)
	err := c.cc.Invoke(ctx, DriverPlugin_BuildTransactionsFromUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) BuildTransactionsFromUnitStream(ctx context.Context, in *UnitBuildContext, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverTransaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DriverPlugin_ServiceDesc.Streams[0], DriverPlugin_BuildTransactionsFromUnitStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnitBuildContext, DriverTransaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DriverPlugin_BuildTransactionsFromUnitStreamClient = grpc.ServerStreamingClient[DriverTransaction]

func (c *driverPluginClient) RunTransaction(ctx context.Context, in *DriverTransaction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_RunTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_Teardown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverPluginServer is the server API for DriverPlugin service.
// All implementations must embed UnimplementedDriverPluginServer
// for forward compatibility.
//
// *
// DriverPlugin defines the gRPC service that database driver plugins must implement.
type DriverPluginServer interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of DriverPlugin, such as database connections.
	Initialize(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// BuildTransactionsFromUnit is called once for each StepUnitDescriptor in a step.
	// Result is a list of transactions with queries with parameters inside.
	BuildTransactionsFromUnit(context.Context, *UnitBuildContext) (*DriverTransactionList, error)
	// *
	// BuildTransactionsFromUnitStream is the same as BuildTransactionsFromUnit,
	// but returns a stream of transactions instead of a list.
	// It is useful for drivers that support streaming transactions.
	// Also, with streaming, we can't reduce RAM usage when building and running transactions.
	// The result is a stream of transactions with queries with parameters inside.
	BuildTransactionsFromUnitStream(*UnitBuildContext, grpc.ServerStreamingServer[DriverTransaction]) error
	// *
	// RunTransaction is called once for each built transaction.
	// The driver must implement the transactional context of operations.
	// If the transaction has a single query, the driver may ignore transactional wrapping and run the query directly.
	RunTransaction(context.Context, *DriverTransaction) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Needs to clean up resources.
	Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDriverPluginServer()
}

// UnimplementedDriverPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriverPluginServer struct{}

func (UnimplementedDriverPluginServer) Initialize(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedDriverPluginServer) BuildTransactionsFromUnit(context.Context, *UnitBuildContext) (*DriverTransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildTransactionsFromUnit not implemented")
}
func (UnimplementedDriverPluginServer) BuildTransactionsFromUnitStream(*UnitBuildContext, grpc.ServerStreamingServer[DriverTransaction]) error {
	return status.Errorf(codes.Unimplemented, "method BuildTransactionsFromUnitStream not implemented")
}
func (UnimplementedDriverPluginServer) RunTransaction(context.Context, *DriverTransaction) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTransaction not implemented")
}
func (UnimplementedDriverPluginServer) Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedDriverPluginServer) mustEmbedUnimplementedDriverPluginServer() {}
func (UnimplementedDriverPluginServer) testEmbeddedByValue()                      {}

// UnsafeDriverPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverPluginServer will
// result in compilation errors.
type UnsafeDriverPluginServer interface {
	mustEmbedUnimplementedDriverPluginServer()
}

func RegisterDriverPluginServer(s grpc.ServiceRegistrar, srv DriverPluginServer) {
	// If the following call pancis, it indicates UnimplementedDriverPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriverPlugin_ServiceDesc, srv)
}

func _DriverPlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).Initialize(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_BuildTransactionsFromUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitBuildContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).BuildTransactionsFromUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_BuildTransactionsFromUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).BuildTransactionsFromUnit(ctx, req.(*UnitBuildContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_BuildTransactionsFromUnitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnitBuildContext)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverPluginServer).BuildTransactionsFromUnitStream(m, &grpc.GenericServerStream[UnitBuildContext, DriverTransaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DriverPlugin_BuildTransactionsFromUnitStreamServer = grpc.ServerStreamingServer[DriverTransaction]

func _DriverPlugin_RunTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).RunTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_RunTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).RunTransaction(ctx, req.(*DriverTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).Teardown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverPlugin_ServiceDesc is the grpc.ServiceDesc for DriverPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroppy.DriverPlugin",
	HandlerType: (*DriverPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _DriverPlugin_Initialize_Handler,
		},
		{
			MethodName: "BuildTransactionsFromUnit",
			Handler:    _DriverPlugin_BuildTransactionsFromUnit_Handler,
		},
		{
			MethodName: "RunTransaction",
			Handler:    _DriverPlugin_RunTransaction_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _DriverPlugin_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildTransactionsFromUnitStream",
			Handler:       _DriverPlugin_BuildTransactionsFromUnitStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugins.proto",
}

const (
	SidecarPlugin_Initialize_FullMethodName  = "/stroppy.SidecarPlugin/Initialize"
	SidecarPlugin_OnStepStart_FullMethodName = "/stroppy.SidecarPlugin/OnStepStart"
	SidecarPlugin_OnStepEnd_FullMethodName   = "/stroppy.SidecarPlugin/OnStepEnd"
	SidecarPlugin_Teardown_FullMethodName    = "/stroppy.SidecarPlugin/Teardown"
)

// SidecarPluginClient is the client API for SidecarPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// SidecarPlugin defines the gRPC service that sidecar plugins must implement.
type SidecarPluginClient interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sidecarPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarPluginClient(cc grpc.ClientConnInterface) SidecarPluginClient {
	return &sidecarPluginClient{cc}
}

func (c *sidecarPluginClient) Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarPlugin_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarPluginClient) OnStepStart(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarPlugin_OnStepStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarPluginClient) OnStepEnd(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarPlugin_OnStepEnd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarPluginClient) Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarPlugin_Teardown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarPluginServer is the server API for SidecarPlugin service.
// All implementations must embed UnimplementedSidecarPluginServer
// for forward compatibility.
//
// *
// SidecarPlugin defines the gRPC service that sidecar plugins must implement.
type SidecarPluginServer interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSidecarPluginServer()
}

// UnimplementedSidecarPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSidecarPluginServer struct{}

func (UnimplementedSidecarPluginServer) Initialize(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedSidecarPluginServer) OnStepStart(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStepStart not implemented")
}
func (UnimplementedSidecarPluginServer) OnStepEnd(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStepEnd not implemented")
}
func (UnimplementedSidecarPluginServer) Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedSidecarPluginServer) mustEmbedUnimplementedSidecarPluginServer() {}
func (UnimplementedSidecarPluginServer) testEmbeddedByValue()                       {}

// UnsafeSidecarPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarPluginServer will
// result in compilation errors.
type UnsafeSidecarPluginServer interface {
	mustEmbedUnimplementedSidecarPluginServer()
}

func RegisterSidecarPluginServer(s grpc.ServiceRegistrar, srv SidecarPluginServer) {
	// If the following call pancis, it indicates UnimplementedSidecarPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SidecarPlugin_ServiceDesc, srv)
}

func _SidecarPlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarPluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarPlugin_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarPluginServer).Initialize(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarPlugin_OnStepStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarPluginServer).OnStepStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarPlugin_OnStepStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarPluginServer).OnStepStart(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarPlugin_OnStepEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarPluginServer).OnStepEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarPlugin_OnStepEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarPluginServer).OnStepEnd(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarPlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarPluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarPlugin_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarPluginServer).Teardown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SidecarPlugin_ServiceDesc is the grpc.ServiceDesc for SidecarPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SidecarPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroppy.SidecarPlugin",
	HandlerType: (*SidecarPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _SidecarPlugin_Initialize_Handler,
		},
		{
			MethodName: "OnStepStart",
			Handler:    _SidecarPlugin_OnStepStart_Handler,
		},
		{
			MethodName: "OnStepEnd",
			Handler:    _SidecarPlugin_OnStepEnd_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _SidecarPlugin_Teardown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins.proto",
}
