// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: plugins.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DriverPlugin_Initialize_FullMethodName   = "/stroppy.DriverPlugin/Initialize"
	DriverPlugin_BuildQueries_FullMethodName = "/stroppy.DriverPlugin/BuildQueries"
	DriverPlugin_RunQuery_FullMethodName     = "/stroppy.DriverPlugin/RunQuery"
	DriverPlugin_Teardown_FullMethodName     = "/stroppy.DriverPlugin/Teardown"
)

// DriverPluginClient is the client API for DriverPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// DriverPlugin defines the gRPC service that database driver plugins must implement.
type DriverPluginClient interface {
	Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BuildQueries(ctx context.Context, in *BuildQueriesContext, opts ...grpc.CallOption) (*DriverQueriesList, error)
	RunQuery(ctx context.Context, in *DriverQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type driverPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverPluginClient(cc grpc.ClientConnInterface) DriverPluginClient {
	return &driverPluginClient{cc}
}

func (c *driverPluginClient) Initialize(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) BuildQueries(ctx context.Context, in *BuildQueriesContext, opts ...grpc.CallOption) (*DriverQueriesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverQueriesList)
	err := c.cc.Invoke(ctx, DriverPlugin_BuildQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) RunQuery(ctx context.Context, in *DriverQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_RunQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverPluginClient) Teardown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DriverPlugin_Teardown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverPluginServer is the server API for DriverPlugin service.
// All implementations must embed UnimplementedDriverPluginServer
// for forward compatibility.
//
// *
// DriverPlugin defines the gRPC service that database driver plugins must implement.
type DriverPluginServer interface {
	Initialize(context.Context, *StepContext) (*emptypb.Empty, error)
	BuildQueries(context.Context, *BuildQueriesContext) (*DriverQueriesList, error)
	RunQuery(context.Context, *DriverQuery) (*emptypb.Empty, error)
	Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDriverPluginServer()
}

// UnimplementedDriverPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriverPluginServer struct{}

func (UnimplementedDriverPluginServer) Initialize(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedDriverPluginServer) BuildQueries(context.Context, *BuildQueriesContext) (*DriverQueriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildQueries not implemented")
}
func (UnimplementedDriverPluginServer) RunQuery(context.Context, *DriverQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedDriverPluginServer) Teardown(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedDriverPluginServer) mustEmbedUnimplementedDriverPluginServer() {}
func (UnimplementedDriverPluginServer) testEmbeddedByValue()                      {}

// UnsafeDriverPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverPluginServer will
// result in compilation errors.
type UnsafeDriverPluginServer interface {
	mustEmbedUnimplementedDriverPluginServer()
}

func RegisterDriverPluginServer(s grpc.ServiceRegistrar, srv DriverPluginServer) {
	// If the following call pancis, it indicates UnimplementedDriverPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DriverPlugin_ServiceDesc, srv)
}

func _DriverPlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).Initialize(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_BuildQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildQueriesContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).BuildQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_BuildQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).BuildQueries(ctx, req.(*BuildQueriesContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_RunQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).RunQuery(ctx, req.(*DriverQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverPlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverPluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverPlugin_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverPluginServer).Teardown(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverPlugin_ServiceDesc is the grpc.ServiceDesc for DriverPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroppy.DriverPlugin",
	HandlerType: (*DriverPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _DriverPlugin_Initialize_Handler,
		},
		{
			MethodName: "BuildQueries",
			Handler:    _DriverPlugin_BuildQueries_Handler,
		},
		{
			MethodName: "RunQuery",
			Handler:    _DriverPlugin_RunQuery_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _DriverPlugin_Teardown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins.proto",
}
