// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: descriptor.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndexDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IndexDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IndexDescriptorMultiError, or nil if none found.
func (m *IndexDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := IndexDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_IndexDescriptor_Columns_Unique := make(map[string]struct{}, len(m.GetColumns()))

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if _, exists := _IndexDescriptor_Columns_Unique[item]; exists {
			err := IndexDescriptorValidationError{
				field:  fmt.Sprintf("Columns[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_IndexDescriptor_Columns_Unique[item] = struct{}{}
		}

		// no validation rules for Columns[idx]
	}

	// no validation rules for Type

	// no validation rules for Unique

	if m.DbSpecific != nil {

		if all {
			switch v := interface{}(m.GetDbSpecific()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IndexDescriptorValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IndexDescriptorValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IndexDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IndexDescriptorMultiError(errors)
	}

	return nil
}

// IndexDescriptorMultiError is an error wrapping multiple validation errors
// returned by IndexDescriptor.ValidateAll() if the designated constraints
// aren't met.
type IndexDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexDescriptorMultiError) AllErrors() []error { return m }

// IndexDescriptorValidationError is the validation error returned by
// IndexDescriptor.Validate if the designated constraints aren't met.
type IndexDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexDescriptorValidationError) ErrorName() string { return "IndexDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e IndexDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexDescriptorValidationError{}

// Validate checks the field values on ColumnDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ColumnDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnDescriptorMultiError, or nil if none found.
func (m *ColumnDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ColumnDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSqlType()) < 1 {
		err := ColumnDescriptorValidationError{
			field:  "SqlType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Nullable

	// no validation rules for PrimaryKey

	// no validation rules for Unique

	// no validation rules for Constraint

	if len(errors) > 0 {
		return ColumnDescriptorMultiError(errors)
	}

	return nil
}

// ColumnDescriptorMultiError is an error wrapping multiple validation errors
// returned by ColumnDescriptor.ValidateAll() if the designated constraints
// aren't met.
type ColumnDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnDescriptorMultiError) AllErrors() []error { return m }

// ColumnDescriptorValidationError is the validation error returned by
// ColumnDescriptor.Validate if the designated constraints aren't met.
type ColumnDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnDescriptorValidationError) ErrorName() string { return "ColumnDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e ColumnDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnDescriptorValidationError{}

// Validate checks the field values on TableDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TableDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TableDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TableDescriptorMultiError, or nil if none found.
func (m *TableDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *TableDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := TableDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTableIndexes() {
		_, _ = idx, item

		if item == nil {
			err := TableDescriptorValidationError{
				field:  fmt.Sprintf("TableIndexes[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableDescriptorValidationError{
						field:  fmt.Sprintf("TableIndexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableDescriptorValidationError{
						field:  fmt.Sprintf("TableIndexes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableDescriptorValidationError{
					field:  fmt.Sprintf("TableIndexes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Constraint

	if all {
		switch v := interface{}(m.GetDbSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableDescriptorValidationError{
				field:  "DbSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TableDescriptorValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TableDescriptorValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TableDescriptorValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TableDescriptorMultiError(errors)
	}

	return nil
}

// TableDescriptorMultiError is an error wrapping multiple validation errors
// returned by TableDescriptor.ValidateAll() if the designated constraints
// aren't met.
type TableDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableDescriptorMultiError) AllErrors() []error { return m }

// TableDescriptorValidationError is the validation error returned by
// TableDescriptor.Validate if the designated constraints aren't met.
type TableDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableDescriptorValidationError) ErrorName() string { return "TableDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e TableDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTableDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableDescriptorValidationError{}

// Validate checks the field values on QueryParamDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryParamDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryParamDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryParamDescriptorMultiError, or nil if none found.
func (m *QueryParamDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryParamDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := QueryParamDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ReplaceRegex

	if m.GetGenerationRule() == nil {
		err := QueryParamDescriptorValidationError{
			field:  "GenerationRule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGenerationRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryParamDescriptorValidationError{
					field:  "GenerationRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryParamDescriptorValidationError{
					field:  "GenerationRule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGenerationRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryParamDescriptorValidationError{
				field:  "GenerationRule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDbSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryParamDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryParamDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryParamDescriptorValidationError{
				field:  "DbSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryParamDescriptorMultiError(errors)
	}

	return nil
}

// QueryParamDescriptorMultiError is an error wrapping multiple validation
// errors returned by QueryParamDescriptor.ValidateAll() if the designated
// constraints aren't met.
type QueryParamDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryParamDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryParamDescriptorMultiError) AllErrors() []error { return m }

// QueryParamDescriptorValidationError is the validation error returned by
// QueryParamDescriptor.Validate if the designated constraints aren't met.
type QueryParamDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryParamDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryParamDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryParamDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryParamDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryParamDescriptorValidationError) ErrorName() string {
	return "QueryParamDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e QueryParamDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryParamDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryParamDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryParamDescriptorValidationError{}

// Validate checks the field values on QueryDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDescriptorMultiError, or nil if none found.
func (m *QueryDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := QueryDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSql()) < 1 {
		err := QueryDescriptorValidationError{
			field:  "Sql",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if item == nil {
			err := QueryDescriptorValidationError{
				field:  fmt.Sprintf("Params[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryDescriptorValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryDescriptorValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryDescriptorValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetCount() <= 0 {
		err := QueryDescriptorValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDbSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDescriptorValidationError{
				field:  "DbSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryDescriptorMultiError(errors)
	}

	return nil
}

// QueryDescriptorMultiError is an error wrapping multiple validation errors
// returned by QueryDescriptor.ValidateAll() if the designated constraints
// aren't met.
type QueryDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDescriptorMultiError) AllErrors() []error { return m }

// QueryDescriptorValidationError is the validation error returned by
// QueryDescriptor.Validate if the designated constraints aren't met.
type QueryDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDescriptorValidationError) ErrorName() string { return "QueryDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e QueryDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDescriptorValidationError{}

// Validate checks the field values on TransactionDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionDescriptorMultiError, or nil if none found.
func (m *TransactionDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := TransactionDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsolationLevel

	if len(m.GetQueries()) < 1 {
		err := TransactionDescriptorValidationError{
			field:  "Queries",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if item == nil {
			err := TransactionDescriptorValidationError{
				field:  fmt.Sprintf("Queries[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionDescriptorValidationError{
						field:  fmt.Sprintf("Queries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionDescriptorValidationError{
						field:  fmt.Sprintf("Queries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionDescriptorValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetCount() <= 0 {
		err := TransactionDescriptorValidationError{
			field:  "Count",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDbSpecific()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionDescriptorValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionDescriptorValidationError{
				field:  "DbSpecific",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionDescriptorMultiError(errors)
	}

	return nil
}

// TransactionDescriptorMultiError is an error wrapping multiple validation
// errors returned by TransactionDescriptor.ValidateAll() if the designated
// constraints aren't met.
type TransactionDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionDescriptorMultiError) AllErrors() []error { return m }

// TransactionDescriptorValidationError is the validation error returned by
// TransactionDescriptor.Validate if the designated constraints aren't met.
type TransactionDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionDescriptorValidationError) ErrorName() string {
	return "TransactionDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionDescriptorValidationError{}

// Validate checks the field values on StepUnitDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StepUnitDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StepUnitDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StepUnitDescriptorMultiError, or nil if none found.
func (m *StepUnitDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *StepUnitDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Async

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StepUnitDescriptor_CreateTable:
		if v == nil {
			err := StepUnitDescriptorValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetCreateTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "CreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "CreateTable",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StepUnitDescriptorValidationError{
					field:  "CreateTable",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StepUnitDescriptor_Query:
		if v == nil {
			err := StepUnitDescriptorValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StepUnitDescriptorValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StepUnitDescriptor_Transaction:
		if v == nil {
			err := StepUnitDescriptorValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetTransaction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "Transaction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StepUnitDescriptorValidationError{
						field:  "Transaction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StepUnitDescriptorValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StepUnitDescriptorValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StepUnitDescriptorMultiError(errors)
	}

	return nil
}

// StepUnitDescriptorMultiError is an error wrapping multiple validation errors
// returned by StepUnitDescriptor.ValidateAll() if the designated constraints
// aren't met.
type StepUnitDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StepUnitDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StepUnitDescriptorMultiError) AllErrors() []error { return m }

// StepUnitDescriptorValidationError is the validation error returned by
// StepUnitDescriptor.Validate if the designated constraints aren't met.
type StepUnitDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepUnitDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepUnitDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepUnitDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepUnitDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepUnitDescriptorValidationError) ErrorName() string {
	return "StepUnitDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e StepUnitDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStepUnitDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepUnitDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepUnitDescriptorValidationError{}

// Validate checks the field values on StepDescriptor with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StepDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StepDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StepDescriptorMultiError,
// or nil if none found.
func (m *StepDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *StepDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := StepDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUnits()) < 1 {
		err := StepDescriptorValidationError{
			field:  "Units",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if item == nil {
			err := StepDescriptorValidationError{
				field:  fmt.Sprintf("Units[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StepDescriptorValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StepDescriptorValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StepDescriptorValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Async

	if len(errors) > 0 {
		return StepDescriptorMultiError(errors)
	}

	return nil
}

// StepDescriptorMultiError is an error wrapping multiple validation errors
// returned by StepDescriptor.ValidateAll() if the designated constraints
// aren't met.
type StepDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StepDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StepDescriptorMultiError) AllErrors() []error { return m }

// StepDescriptorValidationError is the validation error returned by
// StepDescriptor.Validate if the designated constraints aren't met.
type StepDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepDescriptorValidationError) ErrorName() string { return "StepDescriptorValidationError" }

// Error satisfies the builtin error interface
func (e StepDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStepDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepDescriptorValidationError{}

// Validate checks the field values on BenchmarkDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BenchmarkDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BenchmarkDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BenchmarkDescriptorMultiError, or nil if none found.
func (m *BenchmarkDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *BenchmarkDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := BenchmarkDescriptorValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSteps()) < 1 {
		err := BenchmarkDescriptorValidationError{
			field:  "Steps",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if item == nil {
			err := BenchmarkDescriptorValidationError{
				field:  fmt.Sprintf("Steps[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BenchmarkDescriptorValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BenchmarkDescriptorValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BenchmarkDescriptorValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BenchmarkDescriptorMultiError(errors)
	}

	return nil
}

// BenchmarkDescriptorMultiError is an error wrapping multiple validation
// errors returned by BenchmarkDescriptor.ValidateAll() if the designated
// constraints aren't met.
type BenchmarkDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BenchmarkDescriptorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BenchmarkDescriptorMultiError) AllErrors() []error { return m }

// BenchmarkDescriptorValidationError is the validation error returned by
// BenchmarkDescriptor.Validate if the designated constraints aren't met.
type BenchmarkDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BenchmarkDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BenchmarkDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BenchmarkDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BenchmarkDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BenchmarkDescriptorValidationError) ErrorName() string {
	return "BenchmarkDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e BenchmarkDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBenchmarkDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BenchmarkDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BenchmarkDescriptorValidationError{}
